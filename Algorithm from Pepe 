#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Oct 22 13:39:19 2018

@author: arthurmaroquenefroissart
"""

#%%

# Bubble sort implementation.
#
# This function returns nothing because it works by mutating the lst.
def bubble(lst):
    for j in range(0, len(lst) - 1):
        for i in range(0, len(lst) - j - 1):
            if lst[i] > lst[i + 1]:
                temp = lst[i]
                lst[i] = lst[i + 1]
                lst[i + 1] = temp
                
#%%
                
def merge(left, right):
    result = []

    while len(left) != 0 and len(right) != 0:
        if left[0] < right[0]:
            result.append(left[0])
            left.pop(0)
        else:
            result.append(right[0])
            right.pop(0)
            
    if len(left) == 0:
        result += right
    else:
        result += left
            
    return result
        
# merge sort implementation
#
# this function uses our previously declared function merge
def merge_sort(lst):
    if len(lst) <= 1:
        return lst
    
    middle = len(lst) // 2
    left = lst[:middle]
    right = lst[middle:]

    return merge(merge_sort(left), merge_sort(right))

#%%

# Our linear search implementation
def linear(elem, lst):
    for i in range(len(lst)):
        if elem == lst[i]:
            return i
    
    return None

#%%

# binary search
#
# our implementation of the binary search algorithm uses two "walls" called
# low and high, that we move to differentiate which part of the lst are we 
# focused on.
def binary_search(elem, lst):
    low = 0
    high = len(lst) - 1
    
    while low <= high:
        mid = (low + high) // 2
        if lst[mid] > elem:
            high = mid - 1
        elif lst[mid] < elem:
            low = mid + 1
        else:
            return mid
        
    return None
